Q1:
What is the count for fhv vehicle records for year 2019?

SELECT COUNT(*) FROM `<name>.taxi_dataset.external_yellow_tripdata` 

	Answer: 43,244,696
  
Q2:
Write a query to count the distinct number of affiliated_base_number for the entire dataset on both the tables.
What is the estimated amount of data that will be read when this query is executed on the External Table and the Table?

SELECT COUNT(DISTINCT(Affiliated_base_number)) FROM `<name>.taxi_dataset.non_partitioned_yellow_tripdata`

  Answer: 225.82 MB for the External Table and 47.60MB for the BQ Table

Q3:
How many records have both a blank (null) PUlocationID and DOlocationID in the entire dataset?

SELECT COUNT(*) FROM `<name>.taxi_dataset.non_partitioned_yellow_tripdata`
WHERE PUlocationID IS NULL AND DOlocationID IS NULL

  Answer: 717,748
  
Q4:
 What is the best strategy to optimize the table if query always filter by pickup_datetime and order by affiliated_base_number?
--CREATE a partitioned table
CREATE OR REPLACE TABLE <name>.taxi_dataset.partitioned_by_date_and_cluster_yellow_taxi
PARTITION BY
  DATE(pickup_datetime) CLUSTER BY affiliated_base_number AS
  SELECT * FROM <name>.taxi_dataset.non_partitioned_yellow_tripdata
  
  Answer: Partition by pickup_datetime Cluster on affiliated_base_number
  
Q5:
Implement the optimized solution you chose for question 4. 
Write a query to retrieve the distinct affiliated_base_number between pickup_datetime 2019/03/01 and 2019/03/31 (inclusive).
  
SELECT DISTINCT(affiliated_base_number), pickup_datetime
FROM `<name>.taxi_dataset.non_partitioned_yellow_tripdata`
WHERE pickup_datetime BETWEEN '2019-03-01' AND '2019-03-31'


SELECT DISTINCT(affiliated_base_number), pickup_datetime
FROM `<name>.taxi_dataset.partitioned_by_date_and_cluster_yellow_taxi`
WHERE pickup_datetime BETWEEN '2019-03-01' AND '2019-03-31'

  Answer: 647.87 MB for non-partitioned table and 23.06 MB for the partitioned table

Q6:
Where is the data stored in the External Table you created?
	Answer: BCP Bucket
  
Q7:
It is best practice in Big Query to always cluster your data:
No because for smaller Tables Clustering might result in a bigger overhead due to metadata and therefore can cause the cost to rise instead of lower. 

Answer: False
 
  
  
 
