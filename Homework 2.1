# takes taxi data from web -> saves to parquet file -> to google cloud storage

from pathlib import Path
import pandas as pd
import os

from prefect import flow, task
from prefect_gcp.cloud_storage import GcsBucket


@task(log_prints=True, retries=3)
def fetch(dataset_url: str) -> pd.DataFrame:
    """Read data from web into pandas.DataFrame"""

    df = pd.read_csv(dataset_url)
    return df


@task(log_prints=True)
def clean(df: pd.DataFrame) -> pd.DataFrame:
    """Fix some dtype issues"""
    df['lpep_pickup_datetime'] = pd.to_datetime(df.lpep_pickup_datetime)
    df['lpep_dropoff_datetime'] = pd.to_datetime(df.lpep_dropoff_datetime)
    print(df.head(2))
    return df


@task(log_prints=True)
def write_local(df: pd.DataFrame, color: str, dataset_file: str) -> Path:
    """Write DataFrame out as a parquet file"""
    curr_path = os.getcwd()
    local_path = Path(curr_path, "data", dataset_file + ".parquet")
    df.to_parquet(local_path, compression="gzip")
    return local_path

@task(log_prints=True)
def write_gcs(path : Path) -> None:
    """Uploading local parquet file to GCS"""
    gcs_block = GcsBucket.load("taxi-gcs")
    gcs_block.upload_from_path(from_path=path, to_path=path)


@flow(log_prints=True)
def etl_web_to_gcs() -> None:
    """
    The main ETL function
    """
    color = "green"
    year = 2020
    month = 1
    dataset_file = f'{color}_tripdata_{year}-{month:02}'
    dataset_url = f'https://github.com/DataTalksClub/nyc-tlc-data/releases/download/{color}/{dataset_file}.csv.gz'
    "https://github.com/DataTalksClub/nyc-tlc-data/releases/download/green/green_tripdata_2020-01.csv.gz"
    df = fetch(dataset_url)
    df_clean = clean(df)
    print("dataset size: ")
    print(len(df_clean))
    path = write_local(df_clean, color, dataset_file)
    write_gcs(path)


if __name__ == "__main__":
    etl_web_to_gcs()
